1.
def square(number):
  return number * number
squares = map(square, numList)
result = list(squares)
evens = []
for i in numList:
  if i % 2 == 0:
    evens.append(i)

2.
numList = [1, 2, 3, 4, 55, 19882, 277, 1, 1, 1, 2779, 55, 4, 3, 2, 1,]
def square(number):
  return number * number
squares = map(square, numList)
result = list(squares)
evens = []
for i in numList:
  if i % 2 == 0:
    evens.append(i)
sortednums = sorted(numList, reverse=True)
numSet = set(numList)

3.
color = (74, 65, 42)
colorsum = sum(color)
colorlength = len(color)
coloraverage = colorsum / colorlength
print(colorsum)
print(colorlength)
print(coloraverage)

4.
color = (74, 65, 42)
color = ("4A412A")
print(color)

5.
num = 1000000
cities = {"Shanghai": 27000000, "Atlanta": 500000, "Dhaka": 21000000, "Seattle": 740000, "San Antonio": 1400000}
cities["Tokyo"] = 14000000
del cities["Shanghai"]
cities["Tokyo"] = 37000000
print(cities)

6.
num = 1000000
cities = {"Shanghai": 27000000, "Atlanta": 500000, "Dhaka": 21000000, "Seattle": 740000, "San Antonio": 1400000}
cities["Tokyo"] = 14000000
del cities["Shanghai"]
cities["Tokyo"] = 37000000
new_cities = { }
for key, value in cities.items():
    if value > num:
        new_cities[key] = value
print(new_cities)

7.
set1 = {6,7,8,9,10,11,12,13,14,15}
set2 = {1,3,5,7,9,11,13,15,17,19}
print("Set1 is a subset of set2:", set1.issubset(set2))
print("Set1 union set2:", set1.union(set2))
print("Set1 intersect with set2:", set1.intersection(set2))

8.
strings_list = ["apple", "mango", "mango", "cherry", "pineapple", "mango", "pineapple", "banana", "mango", "cherry", "cherry",]
strings_set = set(strings_list)
print(strings_list)
print(strings_set)
